
<HTML>
<HEAD>
<TITLE>Microsoft OOBE</TITLE>
<META http-equiv="Content-Type" content="text/html; charset=ks_c_5601-1987">
<LINK REL="stylesheet" TYPE="text/css" HREF="actsetup\aregstyl.css">
<script language=jscript src="oobeutil.js"></script>
<script language=jscript src="dialmgr.js"></script>
<script language=jscript src="error.js"></script>
<script language=jscript src="icsmgr.js"></script>
<script language=jscript>










var STATUS_MSN = 0;
var STATUS_OEM = 1;
var STATUS_NONE = 2;
var STATUS_OFF = 3;
var STATUS_MAX = 4;
var SNDX_WELCOME = 0;
var SNDX_MSN_ISP = 1;
var SNDX_MSN_REG = 2;
var SNDX_MSN_FINISH = 3;
var SNDX_OEM_REG = 1;
var SNDX_OEM_ISP = 2;
var SNDX_OEM_FINISH = 3;
var SNDX_NONE_REG = 1;
var SNDX_NONE_FINISH = 2;
var SNDX_OFF_EULA = 1;
var SNDX_OFF_PID = 2;
var SNDX_OFF_FINISH = 3;
function CheckPoint(strURL, i1, i2, i3, i4)
{
  this.strURL = strURL;
  this.rgindex = new Array(STATUS_MAX);
  this.rgindex[STATUS_MSN] = i1;
  this.rgindex[STATUS_OEM] = i2;
  this.rgindex[STATUS_NONE] = i3;
  this.rgindex[STATUS_OFF] = i4;
}


var CONNECTED_REFFERAL       = 1;
var CONNECTED_ISP_SIGNUP     = 2;
var CONNECTED_ISP_MIGRATE    = 3;
var CONNECTED_REGISTRATION   = 4;



var CKPT_ACTIV     =         1;
var CKPT_ACTDONE   =         2;
var CKPT_ACTIVERR  =         3;
var CKPT_ACTIVSVC  =         4;
var CKPT_REGISTER1 =         5;
var CKPT_REGISTER3 =         6;
var CKPT_ACTCONN   =         7;
var CKPT_ACTLAN    =         8;
var CKPT_REGDIAL   =         9;
var CKPT_ACT_MSG   =        10;
var CKPT_DONE      =        11;
var CKPT_MAX       =        12;   

var CKPT_ISPDIAL =  CKPT_MAX;
var CKPT_REFDIAL =  CKPT_MAX;
var CKPT_MIGDIAL =  CKPT_MAX;
var CKPT_ISPSIGNUP = CKPT_DONE;


var dnCKPT = new Array(CKPT_MAX);


var g_CurrentCKPT = null;
var g_DialCKPT = null;
var HKEY_LOCAL_MACHINE = 0x80000002;
var OOBE_MAIN_REG_KEY = "SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Setup\\OOBE";
var CKPT_REG_KEY = "\\CKPT";
var TOS_REG_VALUE = "TOS";


var ERR_COMM_NO_ERROR            = 0;
var ERR_COMM_OOBE_COMP_MISSING   = 1;
var ERR_COMM_UNKNOWN             = 2;        
var ERR_COMM_NOMODEM             = 3;        
var ERR_COMM_RAS_TCP_NOTINSTALL  = 4;
var ERR_COMM_ISDN                = 5;
var ERR_COMM_PHONE_AND_ISDN      = 6;



var DERR_DIALTONE           = 680;
var DERR_BUSY               = 676;
var DERR_VOICEANSWER        = 677;
var DERR_NOANSWER           = 678;
var DERR_NO_CARRIER         = 679;
var DERR_HARDWARE_FAILURE   = 630;   
var DERR_PORT_ALREADY_OPEN  = 602;   
var DERR_PORT_OR_DEVICE     = 692;   
var DERR_PPP_TIMEOUT        = 718;
var DERR_REMOTE_DISCONNECT  = 629;   


var FINISH_OK           = 0x00000000;
var FINISH_REBOOT       = 0x00000001;
var FINISH_BAD_PID      = 0x00000002;
var FINISH_BAD_EULA     = 0x00000004;
var FINISH_BAD_STAMP    = 0x00000008;


var KeyEsc = 0x1B;
var KeyEnter = 0xD;
var KeyBackSpc = 0x8;
var KeyDelete = 0x2E;
var KeyTab = 0x9;
var KeyDwnArrow = 0x28;
var KeyUpArrow = 0x26;
var KeyLeftArrow = 0x25;
var KeyRightArrow = 0x27;


var LANGUAGE_REBOOT_NEVER   = 0;
var LANGUAGE_REBOOT_NOW     = 1;
var LANGUAGE_REBOOT_END     = 2;


var HIDE_BACK = 0x0001;
var HIDE_NEXT = 0x0002;
var HIDE_CANCEL = 0x0004;
var HIDE_RESTORE = 0x0008;



var NOLAUNCHISPSIGNUP = "{C37D92A5-CA34-11d2-B71C-00C04F794977}";
var MSNCOMPLETED = "{1C0A22F2-CB6B-11d2-B544-00A0C949DA70}";


var TapiObj = null;
var InfoObj = null;
var EulaObj = null;
var LangObj = null;
var PidObj  = null;
var StatusObj = null;
var DirObj = null;
var ApiObj = null;
var RegisterObj = null;


var g_strISPFile = "";
var g_bStartup;
var g_LastButtonText = null;
var g_FirstFocusElement = null;
var g = null;
var g_SpecialChars = ".'-` ";
var g_bRedial = false;
var g_LineProblem = 0;
var g_bFirstServerError = true;
var g_status = STATUS_OFF;
var g_ServerErrorCount = 0;
var g_IMEExists = false;
var g_OEMAddBackURL = "";
var g_DialingAvailableInCountry = true;
var g_ModalDialogUp = false;
var MS_REGISTRATION  = "{1C956940-8617-11D3-8B99-00A0C91E7F3C}";
var OEM_REGISTRATION = "{ECD24360-B210-11D3-8B99-00A0C91E7F3C}";
var g_bTapiDone = false;
var g_OEMNameStr=window.external.Signup.get_OEMName();
var g_Activation_Install_ID = "";
var g_PID_ENTERED_ONRECORD = "";
var g_Activation_CODE_ENTERED = "";
var g_Activation_CODE_ENTERED_status = "";
var g_InitAutodial = false;
var g_CameFromFirstPage = false;

var L_CheckConnectivity_Text = "연결을 확인하고 있습니다.";
var L_BlankTitle_Text = "";


if (null == ApiObj)
{
    ApiObj = new Object;
    ApiObj = window.external.API;
}
if (null == StatusObj)
{
    StatusObj = new Object;
    StatusObj = window.external.Status;
}
if (null == DirObj)
{
    DirObj = new Object;
    DirObj = window.external.Directions;
}
if (null == InfoObj)
{
    InfoObj = new Object;
    InfoObj = window.external.UserInfo;
}
if (null == RegisterObj)
{
    RegisterObj = new Object;
    RegisterObj = window.external.Register;
}
if (null == TapiObj)
{
    TapiObj = new Object;
    TapiObj = window.external.Tapi;
}
if (null == LangObj)
{
    LangObj = new Object;
    LangObj = window.external.Language;
}





function OnSelectClick() {}


function OnClick() {}


function OnFocus() {}



function ShowSimpleNavBack()
{
    g.window.history.back();
    SetTimerShowIFrame(100);
}

function SimpleNavBack()
{
    ShowIFrame('False');
    window.setTimeout("ShowSimpleNavBack();",500);
}

function HandleTextAreaFocus() {
  g.event.srcElement.style.borderStyle="ridge";
}

function HandleTextAreaBlur() {
  g.event.srcElement.style.borderStyle="";
}

function CheckContrastMode()
{
    try
    {
        var InHighContrastMode = window.external.InHighContrastMode();
    }
    catch(e)
    {
        var L_HighContrastMode1_Text = "InHighContrastMode API 사용 못 함";
        alert(L_HighContrastMode1_Text);
        InHighContrastMode = false;
    }

    if (InHighContrastMode)
    {
        g.deskstyle1.disabled = true;
        g.deskstyle2.disabled = false;
    }
}

function GetPageTitle()
{
    Span_WPA_MainTitle.innerText = g.Title_Text.innerText;
}






function Actdone_LoadMe()
{
    InitFrameRef();
    GetPageTitle();
    CheckContrastMode();

    g_FirstFocusElement = g.btnQuit;
    InitButtons();

    if (g_FirstFocusElement != null)
        window.setTimeout("DoFocus();",1000);
}






function DoFocus()
{
    
    
    
    
    try
    {
        if (g_FirstFocusElement != null)
        {
            g_FirstFocusElement.focus();
        }
    }
    catch(e)
    {
        window.setTimeout("DoFocus();",1000);
    }
}

function Activ_BtnTelephoneHandler()
{
    GoNavigate(CKPT_ACTIVSVC);
}

var g_ActivationRadioSticky = null;
function Activation_LoadMe()
{
    g_CameFromFirstPage = false;

    InitFrameRef();
    GetPageTitle();
    CheckContrastMode();

    if (g_ActivationRadioSticky == null)
        g.btnNext.disabled = true;
    else if (g_ActivationRadioSticky == 1)
        g.rb_act_1.checked = true;
    else if (g_ActivationRadioSticky == 2)
        g.rb_act_2.checked = true;
    else if (g_ActivationRadioSticky == 3)
        g.rb_act_3.checked = true;

    if (g_ActivationRadioSticky != null)
    {
        WPA_ActivationRadioClicked();
    }

    var ndaysleft = ""
    try
    {
        ndaysleft = window.external.GetActivationDaysLeft();
    }
    catch(e)
    {
        ndaysleft = "0";
    }

    var L_LogMeOff_Text = "아니오, 로그오프합니다(<u>O</u>).";

    if (ndaysleft == "0")
    {
        g.act_par01_ZeroDays.style.display = "inline";
        g.act_spn3.innerHTML = L_LogMeOff_Text;
    }
    else
    {
        g.act_par01_HaveDays.style.display = "inline";
        g.act_par02_HaveDays.style.display = "inline";
        g.NumberDaysLeft1.innerText = ndaysleft;
    }

    InitButtons();

    if (g_ActivationRadioSticky == null)
        g_FirstFocusElement = g.document.body;
    else
        g_FirstFocusElement = g.btnNext;

    window.setTimeout("DoFocus();",1000);
}


function WPA_ActivationRadioClicked()
{
    if (g.rb_act_1.checked)
        g_ActivationRadioSticky = 1;
    else if (g.rb_act_2.checked)
        g_ActivationRadioSticky = 2;
    else
        g_ActivationRadioSticky = 3;

    if (g.btnNext.disabled)
    {
        g.btnNext.disabled = false;
        g.btnNext.onclick = GoNext;
        g.btnNext.focus();
    }
}






function Activerr_RetryBtnHandler()
{
    DisableAllButtons();
    if (CheckForAnyConnection())
        GoNavigate(CKPT_ACTIV);
    else
        GoNavigate(CKPT_ACTIVERR);
}

function ActivationErr_LoadMe()
{
    InitFrameRef();
    GetPageTitle();
    CheckContrastMode();

    InitButtons();

    g.btnTelephone.onmouseover = HandleButtonMouseOver;
    g.btnTelephone.onmouseout  = HandleButtonMouseOut;
    g.btnTelephone.onclick = GoNext;

    g.btnNext.onclick   = Activerr_RetryBtnHandler;
    g_FirstFocusElement = g.btnNext;

    if (g_FirstFocusElement != null)
        window.setTimeout("DoFocus();",1000);
}




var g_ActConnRadioSticky = 1;

function ActConn_LoadMe()
{
    InitFrameRef();
    GetPageTitle();
    CheckContrastMode();

    if (g_ActConnRadioSticky == 1)
    {
        g_FirstFocusElement = g.rb_conn_lan;
        g.rb_conn_lan.checked = true;
    }
    else
    {
        g_FirstFocusElement = g.rb_conn_modem;
        g.rb_conn_modem.checked = true;
    }

    InitButtons();

    window.setTimeout("DoFocus();",1000);

}




var ProxySettingsObj = null;

function ProxySettings(ConfigString)
{
    this.UseAuto = false;
    this.UseScript = false;
    this.ScriptUrl = "";
    this.UseProxy = false;
    this.Server = "";
    this.Port = "";

    if (ConfigString != null)
    {
        var i, j;
        var Args = ConfigString.split(/ /);

        for (i = 0; i < Args.length; i++)
        {
            switch (Args[i])
            {
            case 'u':
                var ProxyList = Args[++i];
                var HttpProxy = null;

                
                if (ProxyList.indexOf("=") == -1)
                {
                    HttpProxy = ProxyList;
                }
                else
                {
                    var Proxys = ProxyList.split(/;/);
                    if (Proxys != null)
                    {
                        for (j = 0; j < Proxys.length; j++)
                        {
                            if (Proxys[j].indexOf("http=") == 0)
                            {
                                HttpProxy = Proxys[j].substring(5, Proxys[j].length);
                                break;
                            }
                        }
                    }
                }

                if (HttpProxy)
                {
                    j = HttpProxy.lastIndexOf(':');
                    if (j == -1)
                    {
                        this.Server = HttpProxy;
                    }
                    else
                    {
                        this.Server = HttpProxy.substring(0, j);
                        this.Port = HttpProxy.substring(j+1, HttpProxy.length);
                    }
                }
                break;

            case 'a':
                this.UseAuto = true;
                break;

            case 'm':
                this.UseProxy = true;
                break;
            }
        }
    }

}

function ActLan_LoadMe()
{
    InitFrameRef();
    GetPageTitle();
    CheckContrastMode();

    InitButtons();

    if (ProxySettingsObj == null)
    {
        var ConfigString = window.external.get_ProxySettings();
        ProxySettingsObj = new ProxySettings(ConfigString);
    }

    g.cb_auto_detect.checked = ProxySettingsObj.UseAuto;
    g.cb_use_proxy.checked = ProxySettingsObj.UseProxy;
    g.txt_proxy_url.value = ProxySettingsObj.Server;
    g.txt_proxy_port.value = ProxySettingsObj.Port;

    ActLan_upClickHandler();

    g_FirstFocusElement = g.btnNext;
    window.setTimeout("DoFocus();",1500);
}

function ActLan_upClickHandler()
{
    if (g.cb_use_proxy.checked)
    {
        g.txt_proxy_url.style.backgroundColor = "#ffffff";
        g.txt_proxy_url.disabled = false;
        g.txt_proxy_port.style.backgroundColor = "#ffffff";
        g.txt_proxy_port.disabled = false;
    }
    else
    {
        g.txt_proxy_url.style.backgroundColor = "#dddddd";
        g.txt_proxy_url.disabled = true;
        g.txt_proxy_port.style.backgroundColor = "#dddddd";
        g.txt_proxy_port.disabled = true;
    }
}

function ActLan(Stage)
{
    if (Stage == null)
    {
        
        
        
        Span_WPA_MainTitle.innerText = L_BlankTitle_Text;
        ShowIFrame('False', L_CheckConnectivity_Text);
        ResetConnectedToInternetEx();
        ConnectedToInternetEx(true, "ActLan(1);");
    }
    else
    {
        
        
        
        if (ConnectedToInternetEx(false))
        {
            IcsConnect(ICS_CONN_TYPE_REG);
            SetTimerShowIFrame(15000);
        }
        else
        {
            g_ActivationStatus = ERR_ACT_NETWORK_FAILURE;
            GoNavigate(CKPT_ACT_MSG);
        }
    }
}




var g_TabForward = false;
var g_TabBackward = false;
var g_LastFocusedPidBox;
var g_SelectionExistsBeforeKeyPress=null;
var g_keyPressKeyCode = 0;
var g_CharCode0_plus1=("0".charCodeAt(0))+1;

function RetrievePid()
{
    
    var strPid = PidObj.get_PID();

    
    
    if (strPid.length == 0)
    {
        g.edtProductKey[0].focus();
    }
    
    
    else
    {
        var re = new RegExp("(.*)-(.*)-(.*)-(.*)-(.*)","");
        if(re.exec(strPid) == null) {
            throw "Internal error:  RegExp pattmatch failed!";
        }

        g.edtProductKey[0].value = RegExp.$1;
        g.edtProductKey[1].value = RegExp.$2;
        g.edtProductKey[2].value = RegExp.$3;
        g.edtProductKey[3].value = RegExp.$4;
        g.edtProductKey[4].value = RegExp.$5;
    }
}

function PID_CheckLength(KnownIncomplete)
{
    

    if(KnownIncomplete) {
        g.btnNext.disabled = true;
        g.btnNext.className="buttons-disabled";
        return;
    }

    var TotLength=g.edtProductKey[0].value.length+g.edtProductKey[1].value.length+
        g.edtProductKey[2].value.length+g.edtProductKey[3].value.length+
        g.edtProductKey[4].value.length;

    if (TotLength == 25)
    {
        g.btnNext.disabled = false;
        g.btnNext.className="buttons";
    }
    else
    {
        g.btnNext.disabled = true;
        g.btnNext.className="buttons-disabled";
    }
}

function PIDBox_HandleBlur() {
    g_LastFocusedPidBox=g.event.srcElement;
}

function PIDBox_HandleFocus() {
    g_LastFocusedPidBox=g.event.srcElement;
    OnFocus();
}

function IsProductIDKey(keyCode)
{
    var str = String.fromCharCode(keyCode);

    var result = str.match(/B|C|D|F|G|H|J|K|M|P|Q|R|T|V|W|X|Y|2|3|4|6|7|8|9/);

    return (null != result);
}

function CursorAtEndOfField(currentEdit) {
    

    var tr = g.edtProductKey[currentEdit].createTextRange();
    var tr2 = g.document.selection.createRange();

    tr2.moveStart("textedit",-1);

    if(tr.isEqual(tr2)){
        return true;
    } else {
        return false;
    }
}

function ProductIDKeyDown()
{
    try
    {
        if (g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    var keyCode = g.event.keyCode;

    g_SelectionExistsBeforeKeyPress=(g.document.selection.type!="None");

    if(g.event.srcElement.tagName=="INPUT") {
        var i=g.event.srcElement.id.charCodeAt(3)-g_CharCode0_plus1;
    } else {
        var i=-1;
    }

    switch(keyCode) {

        case KeyTab:
            if(g.event.srcElement == g.edtProductKey[i]) {
                if(g.event.shiftKey)
                    TabBackward(i,true);
                else TabForward(i,true);

                g.event.returnValue = false;
                g.event.keyCode = 0;
                g.event.cancelBubble = true;
                break;
            }
            break;

        case KeyLeftArrow:
            if((i>0) && CursorAtStartOfField(i)) {
                TabBackward(i,false);
                g.event.returnValue = false;
            }
            break;

        case KeyRightArrow:
            if((i<4) && CursorAtEndOfField(i)) {
                TabForward(i,false);
                g.event.returnValue = false;
            }
            break;

        case KeyBackSpc:
        case KeyDelete:

            
            
            
            
            
            

            
            

            
            

            if ((i > 0) &&
                    (   ((g.document.selection.type=="None") && (g.edtProductKey[i].value.length == 0))
                        ||((keyCode==KeyBackSpc)&& CursorAtStartOfField(i)))) {

                TabBackward(i,false);
                g.event.returnValue = false; 
                g.event.keyCode = 0;
            }

            break;

        case KeyEnter:
            if((g.btnNext.disabled == false)&&(g.event.srcElement!=g.btnBack)) {
                g.btnNext.click();
                g.event.returnValue = false;
                g.event.keyCode = 0;
                g.event.cancelBubble = true;
            }
            break;
    }
}

function ProductIDPropertyChange()
{
    try
    {
        if (g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    
    

    if ("value" == g.event.propertyName) {

        
        var i=g.event.srcElement.id.charCodeAt(3)-g_CharCode0_plus1;

        
        
        
        switch(g.edtProductKey[i].value.length) {
            case 5:
                g_TabForward = (i<4);  
                PID_CheckLength(false);
                break;

            case 4:
            case 0:
            case 1:
                PID_CheckLength(true);  
        }

        
        
        

        
        
        if ((g.edtProductKey[i].value.length == 0) && (i > 0) &&
                (g_keyPressKeyCode==KeyBackSpc)&&(g_keyPressKeyCode==KeyDelete)&&
                (g.document.selection.type=="None")) {

            g_TabBackward = true; 
        }
    }

    g_keyPressKeyCode = 0;
}

function ProductIDKeyPress()
{
    try
    {
        if (g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    if (g.event.keyCode == KeyBackSpc) {
        ProductIDKeyDown();
        return;
    }

    KeyCodeToUpper();

    g_keyPressKeyCode = g.event.keyCode;

    if (!IsProductIDKey(g_keyPressKeyCode)) {
        g.event.keyCode = 0;
        return;
    } else {

        var i=g.event.srcElement.id.charCodeAt(3)-g_CharCode0_plus1;

        if((i<4) && (g.edtProductKey[i].value.length == 5) && CursorAtEndOfField(i) && (!g_SelectionExistsBeforeKeyPress)) {
            TabForward(i,false);
        }
    }
}

function ProductIDKeyUp()
{
    try
    {
        if (g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    if((!g_TabForward) && (!g_TabBackward)) {
        return;
    }

    var i=g.event.srcElement.id.charCodeAt(3)-g_CharCode0_plus1;

    if (g_TabBackward) {
        TabBackward(i,false);
        return;
    } else
        if(g_TabForward) {
            TabForward(i,false);
        }
}

function TabForward(currentEdit,DoSelectAll)
{
    g_TabForward = false;

    if(currentEdit==4) {
        
        if(g.document.selection.type!="None") {
            g.document.selection.empty();
        }
        g.btnTelephone.focus();
        return;
    }

    currentEdit++;

    g.edtProductKey[currentEdit].focus();

    if(DoSelectAll) {
        g.edtProductKey[currentEdit].select();
        return;
    }

    var tr = g.edtProductKey[currentEdit].createTextRange();
    tr.collapse(true);
    tr.moveStart("word", 0);
    tr.select();

}

function TabBackward(currentEdit,DoSelectAll)
{
    g_TabBackward = false;

    if (currentEdit == 0) {
        
        if(g.document.selection.type!="None") {
            g.document.selection.empty();
        }
        if(g.btnNext.disabled) {
            g.btnQuit.focus();
        } else {
            g.btnNext.focus();
        }

        return;
    }

    currentEdit--;

    g.edtProductKey[currentEdit].focus();

    if(DoSelectAll) {
        g.edtProductKey[currentEdit].select();
        return;
    }

    var tr = g.edtProductKey[currentEdit].createTextRange();
    tr.collapse(false);
    tr.moveStart("word", 1);
    tr.select();
}

function CursorAtStartOfField(currentEdit) {
    var tr = g.edtProductKey[currentEdit].createTextRange();
    var tr2 = g.document.selection.createRange();

    tr2.moveEnd("textedit",1);

    if(tr.isEqual(tr2)){
        return true;
    } else {
        return false;
    }
}

function CursorAtEndOfField(currentEdit) {
    

    var tr = g.edtProductKey[currentEdit].createTextRange();
    var tr2 = g.document.selection.createRange();

    tr2.moveStart("textedit",-1);

    if(tr.isEqual(tr2)){
        return true;
    } else {
        return false;
    }
}

function StorePid()
{
    var strPid = "";
    for (var i = 0; i < 4; i++)
    {
        strPid += g.edtProductKey[i].value;
        strPid += '-';
    }
    strPid += g.edtProductKey[i].value;
    PidObj.set_PID(strPid);
}






function Activation_ResetNetworking()
{
    if (window.external.CheckOnlineStatus)
    {
        ResetDialing();
    }

    if (g_InitAutodial)
    {
        window.external.InternetAutodialHangup();
        g_InitAutodial = false;
    }
}

function Activation_RetryBtnHandler()
{
    DisableAllButtons();
    if ((g_ActivationStatus == ERR_ACT_INVALID_PID) ||
        (g_ActivationStatus == ERR_ACT_USED_PID) ||
        (g_ActivationStatus == ERR_ACT_BLOCKED_PID) ||
        (g_ActivationStatus == ERR_ACT_DEDICATED_PID_ENTRY))
    {
        StorePid();
        if (PidObj.get_PID.length != 0 && PidObj.ValidatePID())
        {
            if (ReturnToTelephonePage)
            {
                
                g_Load_InstallID = true;

                
                g_ConfirmID_A = "";
                g_ConfirmID_B = "";
                g_ConfirmID_C = "";
                g_ConfirmID_D = "";
                g_ConfirmID_E = "";
                g_ConfirmID_F = "";
                g_ConfirmID_G = "";

                GoNavigate(CKPT_ACTIVSVC);  
            }
            else
                GoNavigate(CKPT_REGDIAL);
        }
        else
        {
            
            g_ActivationStatus = ERR_ACT_INVALID_PID;
            GoNavigate(CKPT_ACT_MSG);
        }
    }
    else
    {
        
        GoNavigate(CKPT_REGDIAL);
    }
}


var L_EnterNewKey_Text   = "새 키 입력:";
var L_EnterKey_Text      = "키 입력:";
var L_NewKey_Text        = "새 키:";
var L_MessageNumber_Text = "메시지 번호: %1";
var L_FinishButton_Text  = "확인";
var L_UpdateButton_Text  = "업데이트( <u>U</u>) ";
function act_desktop_error_LoadMe()
{
    var Accesskey_U = "U";
    var Accesskey_O = "O";
    InitFrameRef();
    GetPageTitle();
    CheckContrastMode();

    Activation_ResetNetworking();

    var ndaysleft = ""
    try
    {
        ndaysleft = window.external.GetActivationDaysLeft();
    }
    catch(e)
    {
        ndaysleft = "0";
    }

    if (g_ActivationStatus == ERR_ACT_SUCCESS)
    {
        var L_ActThankYou_Text       = "감사합니다!";
        Span_WPA_MainTitle.innerText = L_ActThankYou_Text;
        if (g_PostToMS)
            g.acterror_description_SUCCESS1.style.display="inline";
        else
            g.acterror_description_SUCCESS2.style.display="inline";
    }
    else if (g_ActivationStatus == ERR_ACT_INACCESSIBLE)
    {
        var L_ActUnable1_Text        = "Windows 정품 인증을 받을 수 없습니다.";
        Span_WPA_MainTitle.innerText = L_ActUnable1_Text;

        if (ndaysleft == "0")
        {
            g.acterror_description1Post.style.display="inline";
        }
        else
        {
            g.acterror_description1Pre.style.display="inline";
            g.NumberDaysLeft1.innerText  = ndaysleft;
        }
    }
    else if (g_ActivationStatus == ERR_ACT_INVALID_PID)
    {
        var L_ActIncorrectKey_Text  = "잘못된 제품 키";
        Span_WPA_MainTitle.innerText = L_ActIncorrectKey_Text;

        var WPAOEMMode01 = window.external.IsOemSKU();
        if (WPAOEMMode01)
        {
            
            g.acterror_description2_OEM.style.display="inline";
            g.acterror_after_pid_entry_OEMText.style.display="inline";
        }
        else
        {
            
            g.acterror_description2_RETAIL.style.display="inline";
        }
        g.acterror_pid_entry.style.display="inline";
        g.acterror_after_pid_entry_text1.style.display="inline";
        g.acterror_description_verify_key.innerHTML = L_NewKey_Text;
    }
    else if (g_ActivationStatus == ERR_ACT_USED_PID)
    {
        var L_ActProductKey_Text    = "제품 키";
        Span_WPA_MainTitle.innerText = L_ActProductKey_Text;

        var WPAOEMMode02 = window.external.IsOemSKU();
        if (WPAOEMMode02)
        {
            
            g.acterror_description3OEM.style.display="inline";
            g.acterror_after_pid_entry_OEMText.style.display="inline";
        }
        else
        {
            
            g.acterror_description3Retail.style.display="inline";
        }
        g.acterror_pid_entry.style.display="inline";
        g.acterror_description_verify_key.innerHTML = L_NewKey_Text;
        g.acterror_after_pid_entry_text2.style.display="inline";
    }
    else if (g_ActivationStatus == ERR_ACT_INTERNAL_WINDOWS_ERR)
    {
        var L_ActUnable2_Text  = "Windows 정품 인증을 받을 수 없습니다.";
        Span_WPA_MainTitle.innerText = L_ActUnable2_Text;

        if (ndaysleft == "0")
        {
            g.acterror_description4Post.style.display="inline";
        }
        else
        {
            g.acterror_description4Pre.style.display="inline";
            g.NumberDaysLeft2.innerText  = ndaysleft;
        }
    }
    else if (g_ActivationStatus == ERR_ACT_BLOCKED_PID)
    {
        var L_ActUnauthorKey_Text   = "인증되지 않은 제품 키";
        Span_WPA_MainTitle.innerText = L_ActUnauthorKey_Text;

        var WPAOEMMode03 = window.external.IsOemSKU();
        if (WPAOEMMode03)
        {
            
            g.acterror_description5OEM.style.display="inline";
            g.acterror_after_pid_entry_OEMText.style.display="inline";
        }
        else
        {
            
            g.acterror_description5Retail.style.display="inline";
        }
        g.acterror_pid_entry.style.display="inline";
        g.acterror_description_verify_key.innerHTML = L_NewKey_Text;
        g.acterror_after_pid_entry_text2.style.display="inline";
    }
    else if (g_ActivationStatus == ERR_ACT_CORRUPTED_PID)
    {
        g.acterror_description6.style.display="inline";
        g.NumberDaysLeft3.innerText  = ndaysleft;
    }
    else if (g_ActivationStatus == ERR_ACT_NETWORK_FAILURE)
    {
        g.acterror_description7.style.display="inline";
    }
    else if (g_ActivationStatus == ERR_ACT_DEDICATED_PID_ENTRY)
    {
        var L_ActUpdateKey_Text  = "제품 키 변경";
        Span_WPA_MainTitle.innerText = L_ActUpdateKey_Text;

        var WPAOEMMode04 = window.external.IsOemSKU();
        if (WPAOEMMode04)
        {
            
            g.acterror_description_dedicated_pid_OEM.style.display="inline";
            g.acterror_after_pid_entry_OEMText.style.display="inline";
        }
        else
        {
            
            g.acterror_description_dedicated_pid_RETAIL.style.display="inline";
        }
        g.acterror_pid_entry.style.display="inline";
        g.acterror_description_verify_key.innerHTML = L_NewKey_Text;
        g.btnNext.innerHTML = L_UpdateButton_Text;
        g.btnNext.accessKey = Accesskey_U;
    }
    else
    {
        g.acterror_description4.style.display="inline";
        g.NumberDaysLeft2.innerText  = ndaysleft;
    }


    if (g_ActivationStatus != ERR_ACT_SUCCESS)
    {
        if ((g_act_specific_error != 0) && (g_act_specific_error != null))
        {
            g.acterror_specific_error_code.innerText = ApiObj.FormatMessage(L_MessageNumber_Text, g_act_specific_error.toString());
            g.acterror_specific_error_code.style.display = "inline";
        }
    }

    InitButtons();

    if (g_ActivationStatus != ERR_ACT_SUCCESS)
    {
        if ((g_ActivationStatus == ERR_ACT_INVALID_PID) ||
            (g_ActivationStatus == ERR_ACT_USED_PID) ||
            (g_ActivationStatus == ERR_ACT_BLOCKED_PID) ||
            (g_ActivationStatus == ERR_ACT_DEDICATED_PID_ENTRY))
        {
            if (null == PidObj)
            {
                PidObj = new Object;
                PidObj = window.external.ProductID;
            }

            g_FirstFocusElement = g.edtProductKey[0];
            ShowIFrame();
            RetrievePid();

            var rangefocus = g_FirstFocusElement.createTextRange();
            rangefocus.collapse();
            rangefocus.moveStart("word", 0);
            rangefocus.select();

            g_TabForward = false;
            g_TabBackward = false;

            PID_CheckLength(false);

            for (i = 0; i <= 4; i++)
            {
                g.edtProductKey[i].onblur=PIDBox_HandleBlur;
                g.edtProductKey[i].onfocus=PIDBox_HandleFocus;
            }

            g_LastFocusedPidBox=g.edtProductKey[0];
        }
        else
        {
            g_FirstFocusElement = g.btnNext;
            ShowIFrame();
        }

        g.btnTelephone.onmouseover = HandleButtonMouseOver;
        g.btnTelephone.onmouseout  = HandleButtonMouseOut;
        g.btnTelephone.onclick = GoNext;
        g.btnNext.onclick = Activation_RetryBtnHandler;
    }
    else
    {
        g.btnTelephone.style.visibility = "hidden";
        g.btnQuit.style.visibility = "hidden";
        g.btnNext.innerHTML = L_FinishButton_Text;
        g.btnNext.accessKey = Accesskey_O;
        g_FirstFocusElement = g.btnNext;
        ShowIFrame();
    }

    window.setTimeout("DoFocus();",1000);
}






function ValidateConfirmIDBox(Box_Number)
{
var Box_Value = null;
var Box_Valid = null;

    if (Box_Number=='1')
        Box_Value = g.ActCodeBox1.value;

    if (Box_Number=='2')
        Box_Value = g.ActCodeBox2.value;

    if (Box_Number=='3')
        Box_Value = g.ActCodeBox3.value;

    if (Box_Number=='4')
        Box_Value = g.ActCodeBox4.value;

    if (Box_Number=='5')
        Box_Value = g.ActCodeBox5.value;

    if (Box_Number=='6')
        Box_Value = g.ActCodeBox6.value;

    if (Box_Number=='7')
        Box_Value = g.ActCodeBox7.value;

    Box_Valid = window.external.VerifyCheckDigits(Box_Value);

    if (!Box_Valid)
    {
        var L_ConfirmIDInvalid1_Text = "이 필드에 입력한 확인 ID가 잘못되었습니다. 번호를 확인하고 다시 시도하십시오.";
        alert(L_ConfirmIDInvalid1_Text);

        
        if (Box_Number=='1')
        {
            g.ActCodeBox1.focus();
            g.ActCodeBox1.select();
            g_DoFieldChecking = false;
        }
        if (Box_Number=='2')
        {
            g.ActCodeBox2.focus();
            g.ActCodeBox2.select();
            g_DoFieldChecking = false;
        }
        if (Box_Number=='3')
        {
            g.ActCodeBox3.focus();
            g.ActCodeBox3.select();
            g_DoFieldChecking = false;
        }
        if (Box_Number=='4')
        {
            g.ActCodeBox4.focus();
            g.ActCodeBox4.select();
            g_DoFieldChecking = false;
        }
        if (Box_Number=='5')
        {
            g.ActCodeBox5.focus();
            g.ActCodeBox5.select();
            g_DoFieldChecking = false;
        }
        if (Box_Number=='6')
        {
            g.ActCodeBox6.focus();
            g.ActCodeBox6.select();
            g_DoFieldChecking = false;
        }
        if (Box_Number=='7')
        {
            g.ActCodeBox7.focus();
            g.ActCodeBox7.select();
            g_DoFieldChecking = false;
        }
    }
    else
    {
        
        if (Box_Number=='1')
            g.ActCodeBox2.focus();
        if (Box_Number=='2')
            g.ActCodeBox3.focus();
        if (Box_Number=='3')
            g.ActCodeBox4.focus();
        if (Box_Number=='4')
            g.ActCodeBox5.focus();
        if (Box_Number=='5')
            g.ActCodeBox6.focus();
        if (Box_Number=='6')
            g.ActCodeBox7.focus();
        if (Box_Number=='7')
        {
            
            
        }

        g_DoFieldChecking = true;
    }
}

function UpdateConfirmIDFields(FieldToEdit)
{
    if (FieldToEdit == '1')
    {
        g_ConfirmID1 = g.ActCodeBox1.value;
    }

    if (FieldToEdit == '2')
    {
        g_ConfirmID2 = g.ActCodeBox2.value;
    }

    if (FieldToEdit == '3')
    {
        g_ConfirmID3 = g.ActCodeBox3.value;
    }

    if (FieldToEdit == '4')
    {
        g_ConfirmID4 = g.ActCodeBox4.value;
    }

    if (FieldToEdit == '5')
    {
        g_ConfirmID5 = g.ActCodeBox5.value;
    }

    if (FieldToEdit == '6')
    {
        g_ConfirmID6 = g.ActCodeBox6.value;
    }

    if (FieldToEdit == '7')
    {
        g_ConfirmID7 = g.ActCodeBox7.value;
    }

    
    if (g_DoBackSpace)
    {
        g_DoBackSpace = false;
        var tr = null;

        if (FieldToEdit == '1')
        {
            
        }
        else if (FieldToEdit == '2')
        {
            if (g.ActCodeBox2.value == "")
                tr = g.ActCodeBox1.createTextRange();
        }
        else if (FieldToEdit == '3')
        {
            if (g.ActCodeBox3.value == "")
                tr = g.ActCodeBox2.createTextRange();
        }
        else if (FieldToEdit == '4')
        {
            if (g.ActCodeBox4.value == "")
                tr = g.ActCodeBox3.createTextRange();
        }
        else if (FieldToEdit == '5')
        {
            if (g.ActCodeBox5.value == "")
                tr = g.ActCodeBox4.createTextRange();
        }
        else if (FieldToEdit == '6')
        {
            if (g.ActCodeBox6.value == "")
                tr = g.ActCodeBox5.createTextRange();
        }
        else if (FieldToEdit == '7')
        {
            if (g.ActCodeBox7.value == "")
                tr = g.ActCodeBox6.createTextRange();
        }


        
        if ((FieldToEdit != '1') && (tr != null))
        {
            tr.collapse(false);
            tr.moveStart("word", 1);
            tr.select();
        }
    }
}


function DeleteLastCharacter(FieldToEdit)
{
    if (FieldToEdit == '1')
    {
        g.ActCodeBox1.value = g_ConfirmID1;
    }

    if (FieldToEdit == '2')
    {
        g.ActCodeBox2.value = g_ConfirmID2;
    }

    if (FieldToEdit == '3')
    {
        g.ActCodeBox3.value = g_ConfirmID3;
    }

    if (FieldToEdit == '4')
    {
        g.ActCodeBox4.value = g_ConfirmID4;
    }

    if (FieldToEdit == '5')
    {
        g.ActCodeBox5.value = g_ConfirmID5;
    }

    if (FieldToEdit == '6')
    {
        g.ActCodeBox6.value = g_ConfirmID6;
    }

    if (FieldToEdit == '7')
    {
        g.ActCodeBox7.value = g_ConfirmID7;
    }

    var L_OnlyNumbersAllowed_Text = "확인 ID에는 숫자만 사용할 수 있습니다.";
    alert(L_OnlyNumbersAllowed_Text);

    if (FieldToEdit == '1')
        g.ActCodeBox1.focus();
    else if (FieldToEdit == '2')
        g.ActCodeBox2.focus();
    else if (FieldToEdit == '3')
        g.ActCodeBox3.focus();
    else if (FieldToEdit == '4')
        g.ActCodeBox4.focus();
    else if (FieldToEdit == '5')
        g.ActCodeBox5.focus();
    else if (FieldToEdit == '6')
        g.ActCodeBox6.focus();
    else if (FieldToEdit == '7')
        g.ActCodeBox7.focus();
}

var g_ConfirmID1 = "";
var g_ConfirmID2 = "";
var g_ConfirmID3 = "";
var g_ConfirmID4 = "";
var g_ConfirmID5 = "";
var g_ConfirmID6 = "";
var g_ConfirmID7 = "";
var g_DoBackSpace = false;

var g_DoFieldChecking = true;
function activate_OnKeyUp(WhatField)
{
    var keyCode = g.event.keyCode;
    var str = String.fromCharCode(keyCode);

    
    

    
    

    var result           = str.match(/\x60|a|b|c|d|e|f|g|h|i|1|2|3|4|5|6|7|8|9|0/);
    var NonNumericresult = str.match(/A|B|C|D|E|F|G|H|I|J|K|L|M|N|O|P|Q|R|S|T|U|V|W|X|Y|Z/);
    var BackSpc          = str.match(/\x08/);

    var validchar = false;
    if (null != result)
    {
        validchar = true;
    }
    else
    {
        validchar = false;

        if (null != NonNumericresult)
        {
            DeleteLastCharacter(WhatField);
        }
        else
        {
            if (null != BackSpc)
                g_DoBackSpace = true;

            UpdateConfirmIDFields(WhatField);
        }
    }

    if (validchar)
    {
        if (WhatField == '1')
        {
            g_ConfirmID1 = g.ActCodeBox1.value;
            if (g.ActCodeBox1.value.length == 6)
            {
                ValidateConfirmIDBox(WhatField);
            }
        }

        if (WhatField == '2')
        {
            g_ConfirmID2 = g.ActCodeBox2.value;
            if (g.ActCodeBox2.value.length == 6)
            {
                ValidateConfirmIDBox(WhatField);
            }
        }

        if (WhatField == '3')
        {
            g_ConfirmID3 = g.ActCodeBox3.value;
            if (g.ActCodeBox3.value.length == 6)
            {
                ValidateConfirmIDBox(WhatField);
            }
        }

        if (WhatField == '4')
        {
            g_ConfirmID4 = g.ActCodeBox4.value;
            if (g.ActCodeBox4.value.length == 6)
            {
                ValidateConfirmIDBox(WhatField);
            }
        }

        if (WhatField == '5')
        {
            g_ConfirmID5 = g.ActCodeBox5.value;
            if (g.ActCodeBox5.value.length == 6)
            {
                ValidateConfirmIDBox(WhatField);
            }
        }

        if (WhatField == '6')
        {
            g_ConfirmID6 = g.ActCodeBox6.value;
            if (g.ActCodeBox6.value.length == 6)
            {
                ValidateConfirmIDBox(WhatField);
            }
        }

        if (WhatField == '7')
        {
            g_ConfirmID7 = g.ActCodeBox7.value;
            if (g.ActCodeBox7.value.length == 6)
            {
                ValidateConfirmIDBox(WhatField);
            }
        }

        if (g_DoFieldChecking)
            IsConfirmIDComplete();
        
        
        if (!g.btnNext.disabled)
            g.btnNext.focus();
    }
    else
    {
        IsConfirmIDComplete();
    }

}


function IsConfirmIDComplete()
{
    if ((g.ActCodeBox1.value.length == 6) && (g.ActCodeBox2.value.length == 6) && (g.ActCodeBox3.value.length == 6) && (g.ActCodeBox4.value.length == 6) && (g.ActCodeBox5.value.length == 6) && (g.ActCodeBox6.value.length == 6) && (g.ActCodeBox7.value.length == 6))
    {
        g.btnNext.onmouseover = HandleButtonMouseOver;
        g.btnNext.onmouseout  = HandleButtonMouseOut;
        g.btnNext.className="buttons";
        g.btnNext.disabled = false;
        g.btnNext.onclick  = ActivationSvc_NextBtnHandler;
    }
    else
    {
        g.btnNext.className="buttons-disabled";
        g.btnNext.disabled = true;
    }
}

var g_ActivSvc_Reload = true;
function ActivationSvc_NextBtnHandler()
{
    g_Activation_CODE_ENTERED = g.ActCodeBox1.value + '-' +
        g.ActCodeBox2.value + '-' +
        g.ActCodeBox3.value + '-' +
        g.ActCodeBox4.value + '-' +
        g.ActCodeBox5.value + '-' +
        g.ActCodeBox6.value + '-' +
        g.ActCodeBox7.value;

    g_ConfirmID_A  = g.ActCodeBox1.value;
    g_ConfirmID_B  = g.ActCodeBox2.value;
    g_ConfirmID_C  = g.ActCodeBox3.value;
    g_ConfirmID_D  = g.ActCodeBox4.value;
    g_ConfirmID_E  = g.ActCodeBox5.value;
    g_ConfirmID_F  = g.ActCodeBox6.value;
    g_ConfirmID_G  = g.ActCodeBox7.value;

    try
    {
        g_Activation_CODE_ENTERED_status = window.external.SetConfirmationID(g_Activation_CODE_ENTERED);
    }
    catch(e)
    {
        g_Activation_CODE_ENTERED_status = 0;
    }

    DisableAllButtons();
    if (g_Activation_CODE_ENTERED_status == 0)
    {
        GoNavigate(CKPT_DONE);
    }
    else
    {
        g_Load_InstallID = false;
        var L_ConfirmIDInvalid_Text = "확인 ID가 잘못되었습니다. 번호를 확인하고 다시 시도하십시오.";
        alert(L_ConfirmIDInvalid_Text);
        g_ActivSvc_Reload = false;
        GoNavigate(CKPT_ACTIVSVC);
    }
}

function ActivationSvc_ProdkeyBtnHandler()
{
    DisableAllButtons();
    ReturnToTelephonePage = true;
    g_Load_InstallID = false;

    
    g_ConfirmID_A  = g.ActCodeBox1.value;
    g_ConfirmID_B  = g.ActCodeBox2.value;
    g_ConfirmID_C  = g.ActCodeBox3.value;
    g_ConfirmID_D  = g.ActCodeBox4.value;
    g_ConfirmID_E  = g.ActCodeBox5.value;
    g_ConfirmID_F  = g.ActCodeBox6.value;
    g_ConfirmID_G  = g.ActCodeBox7.value;

    g_ActivationStatus = ERR_ACT_DEDICATED_PID_ENTRY;
    GoNavigate(CKPT_ACT_MSG);
}

function PhoneCountries_Changed()
{
    g.ChosenPhoneNumber.innerHTML = "<B>" + g_Phone_Number_Array[g.selPhoneCountry.selectedIndex] + "</B>";
    g.ChosenTollNumber.innerHTML  = "<B>" + g_Toll_Number_Array[g.selPhoneCountry.selectedIndex]  + "</B>";

    
    g_Country_Selected_Index = g.selPhoneCountry.selectedIndex;
}

var g_Country_Selected_Index = 0;
var g_Phone_Number_Array = new Array(500);
var g_Toll_Number_Array =  new Array(500);
function GetPhoneCountries()
{
    var g_PhoneCountries = "";

    try
    {
        g_PhoneCountries = LangObj.get_PhoneCountries();

    }
    catch(e)
    {
        g_PhoneCountries = "API call error: get_PhoneCountries";
    }

    var i;
    var PhoneOption;
    var ModulusResult;
    var PhoneCounter=0;
    var TollCounter =0;
    var regexp1=/\t/;                                                
    var Opt_PhoneCountry_Array = g_PhoneCountries.split(regexp1);    
    var L_SelectYourLocation_Text = "지역 선택";


    
    PhoneOption      = g.document.createElement("OPTION");
    PhoneOption.text = L_SelectYourLocation_Text;
    g.selPhoneCountry.add(PhoneOption);
    g_Toll_Number_Array[TollCounter] = "";
    g_Phone_Number_Array[PhoneCounter] = "";
    TollCounter = TollCounter + 1;
    PhoneCounter = PhoneCounter + 1;

    for(i=0; i < Opt_PhoneCountry_Array.length; i++)
    {
        ModulusResult = i % 3;
        if (ModulusResult == 0)
        {
            PhoneOption      = g.document.createElement("OPTION");
            PhoneOption.text = Opt_PhoneCountry_Array[i];
            g.selPhoneCountry.add(PhoneOption);
        }
        else if (ModulusResult == 1)
        {
            g_Toll_Number_Array[TollCounter] = Opt_PhoneCountry_Array[i];
            TollCounter = TollCounter + 1;
        }
        else
        {
            g_Phone_Number_Array[PhoneCounter] = Opt_PhoneCountry_Array[i];
            PhoneCounter = PhoneCounter + 1;
        }
    }
    g.ChosenPhoneNumber.innerHTML = "<B>" + g_Phone_Number_Array[g_Country_Selected_Index] + "</B>";
    g.ChosenTollNumber.innerHTML  = "<B>" + g_Toll_Number_Array[g_Country_Selected_Index]  + "</B>";
    g.selPhoneCountry.selectedIndex = g_Country_Selected_Index;

}

function BackBtnHandler()
{
    GoNavigate(CKPT_ACTIV);
}

var ReturnToTelephonePage = false;
var g_ConfirmID_A = "";
var g_ConfirmID_B = "";
var g_ConfirmID_C = "";
var g_ConfirmID_D = "";
var g_ConfirmID_E = "";
var g_ConfirmID_F = "";
var g_ConfirmID_G = "";
var g_Load_InstallID = true;
var g_Activation_Install_ID_Full = "";
function ActivationSvc_LoadMe()
{
    InitFrameRef();
    GetPageTitle();
    CheckContrastMode();

    ReturnToTelephonePage = false;


    if (g_Load_InstallID)
    {
        try
        {
            g_Activation_Install_ID = window.external.GetInstallationID();
        }
        catch(e)
        {
            g_Activation_Install_ID = "NOT FOUND.";
        }

        var g_Activation_Install_ID_1 = g_Activation_Install_ID.substring(0,6)+"-"
        var g_Activation_Install_ID_2 = g_Activation_Install_ID.substring(6,12)+"-"
        var g_Activation_Install_ID_3 = g_Activation_Install_ID.substring(12,18)+"-"
        var g_Activation_Install_ID_4 = g_Activation_Install_ID.substring(18,24)+"-"
        var g_Activation_Install_ID_5 = g_Activation_Install_ID.substring(24,30)+"-"
        var g_Activation_Install_ID_6 = g_Activation_Install_ID.substring(30,36)+"-"
        var g_Activation_Install_ID_7 = g_Activation_Install_ID.substring(36,42)+"-"
        var g_Activation_Install_ID_8 = g_Activation_Install_ID.substring(42,48)+"-"
        var g_Activation_Install_ID_9 = g_Activation_Install_ID.substring(48,50)

        g_Activation_Install_ID_Full = g_Activation_Install_ID_1+g_Activation_Install_ID_2+g_Activation_Install_ID_3+g_Activation_Install_ID_4+g_Activation_Install_ID_5+g_Activation_Install_ID_6+g_Activation_Install_ID_7+g_Activation_Install_ID_8+g_Activation_Install_ID_9
    }


    g.spn_install_id.innerText = g_Activation_Install_ID_Full;

    
    g.ActCodeBox1.value = g_ConfirmID_A;
    g.ActCodeBox2.value = g_ConfirmID_B;
    g.ActCodeBox3.value = g_ConfirmID_C;
    g.ActCodeBox4.value = g_ConfirmID_D;
    g.ActCodeBox5.value = g_ConfirmID_E;
    g.ActCodeBox6.value = g_ConfirmID_F;
    g.ActCodeBox7.value = g_ConfirmID_G;


    
    if (g_CameFromFirstPage)
    {
        g.btnBack.style.display = "inline";
    }

    InitButtons();

    
    
    if (g_CameFromFirstPage)
    {
        g.btnBack.onclick = BackBtnHandler;
    }

    IsConfirmIDComplete();  
    GetPhoneCountries();

    g.btnProdkey.onclick = ActivationSvc_ProdkeyBtnHandler;
    g.btnProdkey.onmouseover = HandleButtonMouseOver;
    g.btnProdkey.onmouseout  = HandleButtonMouseOut;


    if (g_Country_Selected_Index==0)
    {
        g_FirstFocusElement = g.selPhoneCountry;
    }
    else if (!g.btnNext.disabled)
    {
        g_FirstFocusElement = g.btnNext;
    }
    else
    {
        g_FirstFocusElement = g.ActCodeBox1;
    }

    if (g_FirstFocusElement != null)
        window.setTimeout("DoFocus();",1000);
}






var g_Reg1RadioSticky = null;
function areg1_LoadMe()
{
    InitFrameRef();
    GetPageTitle();
    CheckContrastMode();

    if (g_Reg1RadioSticky == null)
        g.btnNext.disabled = true;
    else if (g_Reg1RadioSticky == 1)
        g.rb_reg_1.checked = true;
    else if (g_Reg1RadioSticky == 2)
        g.rb_reg_2.checked = true;

    InitButtons();

    if (g.btnNext.disabled)
        g_FirstFocusElement = g.btnBack;
    else
        g_FirstFocusElement = g.btnNext;
    window.setTimeout("DoFocus();",1500);
}

function WPA_Reg1RadioClicked()
{
    
    if(g.btnNext.disabled && (g.rb_reg_1.checked || g.rb_reg_2.checked))
    {
        if (g.rb_reg_1.checked)
            g_Reg1RadioSticky = 1;
        else if (g.rb_reg_2.checked)
            g_Reg1RadioSticky = 2;

        g.btnNext.disabled = false;
        g.btnNext.onclick = GoNext;
        g.btnNext.focus();
    }
}




var StateAbbrevs = new Array("","AL","AK","AZ","AR","CA","CO","CT","DC","DE","FL","GA","HI","ID","IL","IN","IA","KS","KY","LA","ME","MD","MA","MI","MN","MS","MO","MT","NE","NV","NH","NJ","NM","NY","NC","ND","OH","OK","OR","PA","PR","RI","SC","SD","TN","TX","UT","VT","VA","WA","WV","WI","WY");
var FullStateNames = new Array("Alabama","Alaska","Arizona","Arkansas","California","Colorado","Connecticut","Washington, D.C.","Delaware","Florida","Georgia","Hawaii","Idaho","Illinois","Indiana","Iowa","Kansas","Kentucky","Louisiana","Maine","Maryland","Massachusetts","Michigan","Minnesota","Mississippi","Missouri","Montana","Nebraska","Nevada","New Hampshire","New Jersey","New Mexico","New York","North Carolina","North Dakota","Ohio","Oklahoma","Oregon","Pennsylvania","Puerto Rico","Rhode Island","South Carolina","South Dakota","Tennessee","Texas","Utah","Vermont","Virginia","Washington","West Virginia","Wisconsin","Wyoming");
var ProvinceNames = new Array("","Alberta","British Columbia","Manitoba","New Brunswick","Newfoundland","Northwest Territories","Nova Scotia","Nunavut","Ontario","Prince Edward Island","Quebec","Saskatchewan","Yukon");


var g_StateName2IndexMap= new ActiveXObject("Scripting.Dictionary");
var g_ProvinceName2IndexMap= new ActiveXObject("Scripting.Dictionary");

g_ProvinceName2IndexMap.CompareMode = 1;  
g_StateName2IndexMap.CompareMode = 1;  


var ii;
for(ii=1;ii<=FullStateNames.length;ii++) {
    
  g_StateName2IndexMap.Add(FullStateNames[ii-1].toUpperCase(),ii);
  g_StateName2IndexMap.Add(StateAbbrevs[ii].toUpperCase(),ii);

  if(ii < ProvinceNames.length) {
     g_ProvinceName2IndexMap.Add(ProvinceNames[ii].toUpperCase(),ii);
  }
}

var L_Postal_Text = "우편 번호(<u>Z</u>):";
var L_AsteriskPostal_Text = "*우편 번호(<u>Z</u>):";
var L_Province_Text= "시/도(<u>P</u>):";
var L_AsteriskProvince_Text= "*시/도(<u>P</u>):";

var L_Canada_Text="캐나다";
var L_UnitedStates_Text="미국";

function Reg3UserCountryChanged() {

    


    g_Country=g.selCountry.options(g.selCountry.selectedIndex).text;

    if(g_Country == L_UnitedStates_Text) {
        if(g.selUSState.style.display!="inline") {
          g.selUSState.style.display="inline";
        }

        g.selCAProvince.style.display="none";
        g.UserStateTextBox.style.display="none";

        
        if(g.UserStateTextBox.value!="") {
          var res=g_StateName2IndexMap.Item(g.UserStateTextBox.value.toUpperCase());
          if(res!=null) {
             g.selUSState.selectedIndex=res;
          }
        }
        g.LabelZIP.innerHTML = L_AsteriskPostal_Text;
        g.StateLabel.innerHTML = L_AsteriskProvince_Text;
    } else if(g_Country == L_Canada_Text) {
        g.selUSState.style.display="none";
        g.selCAProvince.style.display="inline";
        g.UserStateTextBox.style.display="none";

        
        if(g.UserStateTextBox.value!="") {
          var res=g_ProvinceName2IndexMap.Item(g.UserStateTextBox.value.toUpperCase());
          if(res!=null) {
             g.selCAProvince.selectedIndex=res;
          }
        }
        g.LabelZIP.innerHTML = L_AsteriskPostal_Text;
        g.StateLabel.innerHTML = L_AsteriskProvince_Text;
    } else {
        g.selUSState.style.display="none";
        g.selCAProvince.style.display="none";
        g.UserStateTextBox.style.display="inline";
        g.LabelZIP.innerHTML = L_Postal_Text;
        g.StateLabel.innerHTML = L_Province_Text;
    }

    g_CountryIdx=g.selCountry.selectedIndex;

    Reg3UserStateChanged();
}

var L_FullName_Text="*이름(<u>F</u>):";

function Reg3UserStateChanged() {

    

    

    if(g.selUSState.style.display!="none")
    {
        g_StateIdx=g.selUSState.selectedIndex;
        g_State=g.selUSState.options(g.selUSState.selectedIndex).text;
        g.StateLabel.htmlFor="selUSState";
    }
    else if (g.selCAProvince.style.display!="none")
    {
         g_StateIdx=g.selCAProvince.selectedIndex;
         g_State=g.selCAProvince.options(g.selCAProvince.selectedIndex).text;
         g.StateLabel.htmlFor="selCAProvince";
    }
    else
    {
        g_State = g.UserStateTextBox.value;
        g.StateLabel.htmlFor="UserStateTextBox";
    }
}




var g_FirstName=InfoObj.get_FirstName();

var g_LastName=InfoObj.get_LastName();
var g_Address1=InfoObj.get_Address1();
var g_Address2=InfoObj.get_Address2();
var g_City=InfoObj.get_City();
var g_ZipCode=InfoObj.get_Zip();
var g_EmailAddr= InfoObj.get_PrimaryEmail();
var g_Country=InfoObj.get_Country();
var g_CountryIdx=-1;
var g_State=InfoObj.get_State();
var g_StateIdx=0;

function Reg3SaveSettings() {
    g_FirstName=g.UserFirstName.value;
    

    if (IsKoreanLocale())
        g_LastName="";
    else
        g_LastName=g.UserLastName.value;

    g_Address1=g.UserAddress.value;
    g_Address2=g.UserAddress2.value;
    g_ZipCode=g.UserZipCode.value;
    g_EmailAddr=g.UserEmailAddress.value;
    g_City=g.UserCity.value;
    g_Country=g.selCountry.options(g.selCountry.selectedIndex).text;

    if(g.UserStateTextBox.style.display!="none")
    {
        g_State=g.UserStateTextBox.value;
    }
    else if (g.selUSState.style.display!="none")
    {
        g_State=g.selUSState.options(g.selUSState.selectedIndex).text;
    }
    else
    {
        g_State=g.selCAProvince.options(g.selCAProvince.selectedIndex).text;
    }

    InfoObj.set_FirstName(g_FirstName);
    InfoObj.set_LastName(g_LastName);
    
    InfoObj.set_Country(g_Country);
    InfoObj.set_State(g_State);
    InfoObj.set_Address1(g_Address1);
    InfoObj.set_Address2(g_Address2);
    InfoObj.set_PrimaryEmail(g_EmailAddr);
    InfoObj.set_Zip(g_ZipCode);
    InfoObj.set_City(g_City);

    TapiObj.set_CountryIndex(g.selCountry.selectedIndex);
    InfoObj.set_CountryID(TapiObj.get_CountryID());

    
    InfoObj.set_MSUpdate(true);

    InfoObj.set_MSOffer(false);
    if ((g_PostToMS==true) && (g.sharems.checked))
        InfoObj.set_MSOffer(true);

    InfoObj.set_OtherOffer(false);
    if ((g_PostToMS==true) && (g.sharemsPartners.checked))
        InfoObj.set_OtherOffer(true);
}


InfoObj.set_MSOffer(false);
InfoObj.set_OtherOffer(false);
function Reg3_LoadMe()
{
    InitFrameRef();
    CheckContrastMode();

    GetPageTitle();

    g_FirstFocusElement = g.UserFirstName;

    if (IsFarEastLocale())
    {

      


















        g.MainPageCell.style.display="none";  

        
        

        g.FieldTable.moveRow(1,0);  
        g.FieldTable.moveRow(6,2);  
        g.FieldTable.moveRow(6,3);  
        g.FieldTable.moveRow(6,4);  

        g.FE_ZIPLabel.innerHTML=g.LabelRight.innerHTML;
        g.FE_ZIPInput.innerHTML=g.MenuRight.innerHTML;
        g.FE_ZIPRow.style.display="inline";

        g.LabelRight.innerHTML="";
        g.MenuRight.innerHTML="";

        
        g.UserZipCode.size=30;
        g.UserZipCode.maxlength=120;

        g.UserStateTextBox.size=30;
        g.UserStateTextBox.maxlength=120;

        g_FirstFocusElement = g.UserLastName;

        if (IsKoreanLocale()) {
            g.LastNameRow.style.display="none";
            g.LabelFirstName.innerHTML=L_FullName_Text;
            g_FirstFocusElement = g.UserFirstName;
        }

        g.MainPageCell.style.display="inline";
    }

    
    g.selCountry.style.width=g.UserEmailAddress.offsetWidth;

    g.UserFirstName.value=g_FirstName;
    
    g.UserLastName.value=g_LastName;
    g.UserAddress.value=g_Address1;
    g.UserAddress2.value=g_Address2;
    g.UserZipCode.value=g_ZipCode;
    g.UserEmailAddress.value=g_EmailAddr;
    g.UserCity.value=g_City;

    
    
    

    g.selUSState.remove(0);

    for (var i = 0; i < StateAbbrevs.length; i++) {
       var oOption  = g.document.createElement("OPTION");
       oOption.text = StateAbbrevs[i];
       if (StateAbbrevs[i] == g_State)
       {
           g_StateIdx = i;
       }
       g.selUSState.add(oOption);
    }

    for (i = 0; i < ProvinceNames.length; i++) {
       oOption  = g.document.createElement("OPTION");
       oOption.text = ProvinceNames[i];
       if (ProvinceNames[i] == g_State)
       {
           g_StateIdx = i;
       }
       g.selCAProvince.add(oOption);
    }

    var fTapi = TapiObj.IsTAPIConfigured();  










    g_CountryIdx = TapiObj.get_CountryIndex();

    if(g_CountryIdx>=0)
    {
        g.selCountry.selectedIndex=g_CountryIdx;
        if(g_Country ==  L_UnitedStates_Text)
        {
            g.selUSState.selectedIndex=g_StateIdx;
        }
        else if(g_Country == L_Canada_Text)
        {
            g.selCAProvince.selectedIndex=g_StateIdx;
        }
        else
            g.UserStateTextBox.value=g_State;
    }
    else
    {
        
        g.selCountry.selectedIndex = TapiObj.get_CountryIndex();
    }

    Reg3UserCountryChanged();
    Reg3UserStateChanged();

    var MSoffer_Checked = InfoObj.get_MSOffer();
    if (MSoffer_Checked)
        g.sharems.checked = true;
    else
        g.sharems.checked = false;

    var MSotheroffer_Checked = InfoObj.get_OtherOffer();
    if (MSotheroffer_Checked)
        g.sharemsPartners.checked = true;
    else
        g.sharemsPartners.checked = false;

    InitButtons();

    g.error_mesg.innerHTML = L_RequiredField_Text;
    g.error_mesg.style.display="inline";

    var L_CNIL_Text = "<p>";
    var L_CnilStyleDisplay_Text = "none";

    g.cnil_mesg.innerHTML = L_CNIL_Text;
    g.cnil_mesg.style.display=L_CnilStyleDisplay_Text;

    window.setTimeout("DoFocus();",1000);
}
function GetCurrentProvince() {
    if(g.selCountry.options(g.selCountry.selectedIndex).text == L_UnitedStates_Text) {
        return g.selUSState.options(g.selUSState.selectedIndex).text;
    } else if(g.selCountry.options(g.selCountry.selectedIndex).text == L_Canada_Text) {
        return g.selCAProvince.options(g.selCAProvince.selectedIndex).text;
    } else return g.UserStateTextBox.value;
}

function GetCurrentCountry() {
    return g.selCountry.options(g.selCountry.selectedIndex).text;
}

var L_Email_Text="올바른 전자 메일 주소를 입력하거나 전자 메일 주소 입력란을 비워 두십시오.";
var L_EnterValid_Text="* 필수 항목에 내용을 입력하십시오.";
var L_RequiredField_Text="* 표시가 있는 필드는 반드시 입력해야 합니다.";

var g_PostToMS = false;
var g_PostToOEM = false; 
var POST_TO_OEM = 1;
var POST_TO_MS = 2;
var bPostChkBxStateSaved = false;


function ShownavigatetoPrivacy()
{
    Navigate("actsetup\\aprvcyMS.htm");
    SetTimerShowIFrame(100);
}

function navigatetoPrivacy(PrivPage)
{
    if (g_CurrentCKPT == CKPT_REGISTER3)
       Reg3SaveSettings();

    if (g_CurrentCKPT == CKPT_REGISTER1)
    {
        if (g.rb_reg_1.checked)
            g_Reg1RadioSticky = 1;
        else if (g.rb_reg_2.checked)
            g_Reg1RadioSticky = 2;
        else
            g_Reg1RadioSticky = null;
    }

    ShowIFrame('False');
    window.setTimeout("ShownavigatetoPrivacy();",500);
}

function ShownavigatetoActPolicy()
{
    Navigate("actsetup\\apolicy.htm");
    SetTimerShowIFrame(100);
}

function navigatetoActPolicy()
{
    if (g.rb_act_1.checked)
        g_ActivationRadioSticky = 1;
    else if (g.rb_act_2.checked)
        g_ActivationRadioSticky = 2;
    else if (g.rb_act_3.checked)
        g_ActivationRadioSticky = 3;
    else
        g_ActivationRadioSticky = null;

    ShowIFrame('False');
    window.setTimeout("ShownavigatetoActPolicy();",500);
}

function VerifyReg3Fields() {
       g.error_mesg.style.display="none";
       var LastErrorField = null;

       var CurReg3ErrStringArray = new Array();

       
       

       if(g.UserEmailAddress.value != "") {
           
           
             var re = new RegExp("^\\s*\\S+@\\S+\\.\\S\\S+","");
             if(re.exec(g.UserEmailAddress.value) == null) {
                 LastErrorField = g.UserEmailAddress;
                 g.LabelEmail.className = "text-error";
             } else {
                 g.LabelEmail.className = "text-primary";
             }
       }

       var CurCountry=GetCurrentCountry();

       
       if ((CurCountry == L_UnitedStates_Text)||(CurCountry == L_Canada_Text)) {
          if(g.UserZipCode.value == "") {
            LastErrorField = g.UserZipCode;
            g.LabelZIP.className = "text-error";
          } else {
             g.LabelZIP.className = "text-primary";
          }

          if(GetCurrentProvince() == "") {
             if(g.selUSState.style.display!="none") {
                LastErrorField = g.selUSState;
             } else {
                LastErrorField = g.selCAProvince;
             }
             g.StateLabel.className = "text-error";

          } else {
             g.StateLabel.className = "text-primary";
          }
       }


       if(g.UserCity.value == "") {
          LastErrorField = g.UserCity;
          g.LabelCity.className = "text-error";
       } else {
          g.LabelCity.className = "text-primary";
       }

       if(g.UserAddress.value == "") {
          LastErrorField = g.UserAddress;
          g.LabelAddress.className = "text-error";
       } else {
          g.LabelAddress.className = "text-primary";
       }

       if((g.UserLastName.value == "") && (g.LastNameRow.style.display!="none")) {
          LastErrorField = g.UserLastName;
          g.LabelLastName.className = "text-error";
       } else {
          g.LabelLastName.className = "text-primary";
       }

       if(g.UserFirstName.value == "") {
          g.LabelFirstName.className = "text-error";
          LastErrorField = g.UserFirstName;
       } else {
          g.LabelFirstName.className = "text-primary";
       }

       if(LastErrorField==null) {
           return true;
       }

       

       if(LastErrorField==g.UserEmailAddress) {
          g.error_mesg.innerText = L_Email_Text;
       } else {
          g.error_mesg.innerText = L_EnterValid_Text;
       }

       g.error_mesg.className = "text-error";
       g.error_mesg.style.display="inline";

        try
        {
            g.btnNext.disabled=false;
        }
        catch(e) {}
        try
        {
            g.btnBack.disabled=false;
        }
        catch(e) {}
        try
        {
            g.btnSkip.disabled=false;
        }
        catch(e) {}
        InitButtons();

        LastErrorField.focus();

       return false;
}








function Start_CheckEnableNextButton()
{
    try
    {
        if (g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    if (Start_CheckLengthRequirement() &&
        Start_CheckLengthNotEqualSpaces())
    {
        g.btnNext.disabled = false;
    }
    else
    {
        g.btnNext.disabled = true;
    }
    InitButtons();
}

function Start_CheckLengthRequirement()
{
    if ((g.edt_FirstName.value.length != 0) ||
         (g.edt_LastName.value.length != 0))
        return true;
    else
        return false;
}

function Start_CheckLengthNotEqualSpaces()
{
    if ((g.edt_FirstName.value.length != NumberOfSpaces(g.edt_FirstName.value)) ||
         (g.edt_LastName.value.length != NumberOfSpaces(g.edt_LastName.value)))
        return true;
    else
        return false;
}









function _Default_LoadMe(SimpleBack, SimpleNext)
{
    InitFrameRef();
    CheckContrastMode();

    if (g.btnNext != null)
        g_FirstFocusElement = g.btnNext;
    else if (g.btnSkip != null)
        g_FirstFocusElement = g.btnSkip;
    else if (g.btnBack != null)
        g_FirstFocusElement = g.btnBack;

    InitButtons(SimpleBack, SimpleNext);
    if (g_FirstFocusElement != null)
        window.setTimeout("DoFocus();",1000);
    else
        g.document.body.focus();
}


function New_Default_LoadMe(SimpleBack, SimpleNext)
{
    InitFrameRef();
    GetPageTitle();
    CheckContrastMode();

    if (g.btnNext != null)
        g_FirstFocusElement = g.btnNext;
    else if (g.btnSkip != null)
        g_FirstFocusElement = g.btnSkip;
    else if (g.btnBack != null)
        g_FirstFocusElement = g.btnBack;

    InitButtons(SimpleBack, SimpleNext);

    window.setTimeout("DoFocus();",1000);
}


















function InitCKPT()
{
    dnCKPT[CKPT_ACTIV]     = new CheckPoint("actsetup\\activ.htm",          0,     0,     0,     0);
    dnCKPT[CKPT_ACTDONE]   = new CheckPoint("actsetup\\actdone.htm",        0,     0,     0,     0);
    dnCKPT[CKPT_ACTIVERR]  = new CheckPoint("actsetup\\activerr.htm",       0,     0,     0,     0);
    dnCKPT[CKPT_ACTIVSVC]  = new CheckPoint("actsetup\\activsvc.htm",       0,     0,     0,     0);
    dnCKPT[CKPT_REGISTER1] = new CheckPoint("actsetup\\areg1.htm",          0,     0,     0,     0);
    dnCKPT[CKPT_REGISTER3] = new CheckPoint("actsetup\\ausrinfo.htm",       0,     0,     0,     0);
    dnCKPT[CKPT_ACTCONN]   = new CheckPoint("actsetup\\actconn.htm",        0,     0,     0,     0);
    dnCKPT[CKPT_ACTLAN]    = new CheckPoint("actsetup\\actlan.htm",         0,     0,     0,     0);
    dnCKPT[CKPT_REGDIAL]   = new CheckPoint("actsetup\\adrdyreg.htm",       0,     0,     0,     0);
    dnCKPT[CKPT_ACT_MSG]   = new CheckPoint("actsetup\\adeskerr.htm",       0,     0,     0,     0);
    dnCKPT[CKPT_DONE]      = new CheckPoint("actsetup\\aregdone.htm",       0,     0,     0,     0);
    PopCKPT();
}

function PushCKPT(ckpt)
{
  if (ckpt > 0 && ckpt < CKPT_MAX)
  {
    var tos = 0;
    try
    {
      tos = ApiObj.get_RegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, TOS_REG_VALUE);
    }
    catch (e) {}
    ApiObj.set_RegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, tos.toString(), ckpt);
    ApiObj.set_RegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, TOS_REG_VALUE, ++tos);
    g_CurrentCKPT = ckpt;
  }
}

function PopCKPT(ckptCheck)
{
  var ckpt = 0;
  try
  {
    var tos = ApiObj.get_RegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, TOS_REG_VALUE);
    if (tos > 0)
    {
      ckpt = ApiObj.get_RegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, (tos - 1).toString());

      if (null == ckptCheck || ckpt == ckptCheck)
      {
        ApiObj.set_RegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, TOS_REG_VALUE, --tos);
        ApiObj.DeleteRegValue(HKEY_LOCAL_MACHINE, OOBE_MAIN_REG_KEY + CKPT_REG_KEY, tos.toString());
      }
    }
  }
  catch (e) {}

  if (ckpt > 0 && ckpt < CKPT_MAX)
  {
    g_CurrentCKPT = ckpt;
  }
  else
    g_CurrentCKPT = null;
}

function URLFromCKPT(ckpt)
{
  var str = "";
  if (ckpt > 0 && ckpt < CKPT_MAX)
  {
    str = dnCKPT[ckpt].strURL;
  }
  return str;
}

function IndexFromCKPT(ckpt, status)
{
  var index = 0;
  if (ckpt > 0 && ckpt < CKPT_MAX)
  {
    var checkpoint = dnCKPT[ckpt];
    index = checkpoint.rgindex[status];
  }
  return index;
}



function IsLocalFile()
{
    try
    {
        return (-1 != g.location.protocol.indexOf("file"));
    }
    catch (e)
    {
        return false;
    }
}







function SetBack(strURL)
{
    g_OEMAddBackURL = strURL;
}

function GoCancel(ckpt)
{
    trace("GoCancel: CurrentCKPT = " + g_CurrentCKPT);

    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    DisableAllButtons();

    switch (g_CurrentCKPT)
    {
        case CKPT_REGDIAL:
            if (InActivation_AppMode())
            {
                g_DoActivation = false;
                ShowIFrame('False');
                window.setTimeout("ExitWPA();",1000);
            }
            else
            {
                GoNavigate(CKPT_DONE);
            }
            break;
        case CKPT_REGISTER3:
            g_PostToMS = false;
            GoNavigate(CKPT_REGDIAL);
            break;

        case CKPT_ACTLAN:
            ActLan();
            break;
    }
}


function GoBack(ckpt)
{
    trace("GoBack: CurrentCKPT = " + g_CurrentCKPT);

    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    DisableAllButtons();

    if (g_CurrentCKPT == g_DialCKPT)
        ResetDialing();

    if(g_CurrentCKPT == CKPT_REGISTER1)
    {
        if (g.rb_reg_1.checked)
            g_Reg1RadioSticky = 1;
        else if (g.rb_reg_2.checked)
            g_Reg1RadioSticky = 2;
        else
            g_Reg1RadioSticky = null;
    }

    if(g_CurrentCKPT == CKPT_REGISTER3)
    {
        Reg3SaveSettings();  
    }

    var ckptPrevious = g_CurrentCKPT;
    PopCKPT();

    if (ckptPrevious == g_CurrentCKPT)
    {
        
        PopCKPT();
    }

    if (g_CurrentCKPT > 0 && g_CurrentCKPT < CKPT_MAX)
    {
        GoNavigate(g_CurrentCKPT);
    }
}

function StatusNavigate()
{
    var iMove = IndexFromCKPT(g_CurrentCKPT, g_status) - window.external.get_StatusIndex;
    while (iMove > 0)
    {
        window.external.MoveNext();
        --iMove;
    }
    while (iMove < 0)
    {
        window.external.MovePrevious();
        ++iMove;
    }
}





function ShowGoNavigate()
{
var ckptGoHere = g_ckpt_target;
    switch (ckptGoHere)
    {
    case CKPT_REGDIAL:
        trace("GoNavigate: CKPT_REGDIAL");

        
        ResetConnectedToInternetEx();
        if (!ConnectedToInternetEx(true))
        {
            
            window.external.InternetAutodial();

            
            ResetConnectedToInternetEx();
            if (!ConnectedToInternetEx(true))
            {
                
                if (HasNetwork() && HasModem())
                {
                    GoNavigate(CKPT_ACTCONN);
                }
                else if (HasNetwork())
                {
                    GoNavigate(CKPT_ACTLAN);
                }
                else if (HasModem())
                {
                    PushCKPT(ckptGoHere);  
                    Navigate(URLFromCKPT(CKPT_REGDIAL));
                }
                else
                {
                    GoNavigate(CKPT_ACTIVERR);
                }

                SetTimerShowIFrame(15000);
                break;
            }
            else
            {
                g_InitAutodial = true;
            }
        }

        IcsConnect(ICS_CONN_TYPE_REG);
        SetTimerShowIFrame(15000);
        break;

    case CKPT_ACT_MSG:
        trace("GoNavigate: CKPT_ACT_MSG");
        PushCKPT(ckptGoHere);  
        Navigate(URLFromCKPT(ckptGoHere));
        SetTimerShowIFrame(5000);
        break;

    default:
        trace("GoNavigate: default (" + ckptGoHere + " = " +
              URLFromCKPT(ckptGoHere) + ")");
        PushCKPT(ckptGoHere);  
        Navigate(URLFromCKPT(ckptGoHere));
        SetTimerShowIFrame(1200);
        break;
    }
}

var g_ckpt_target = null;
var g_AfterConnectionDone = false;
function GoNavigate(ckptGoHere)
{
    try
    {
        if (g_bStartup == false)
        {
            if (IsLocalFile())
            {
                if (g.event != null)
                {
                    g.event.returnValue = false;
                    g.event.cancelBubble = true;
                }
            }
        }
        else
            g_bStartup = false;

    }
    catch(e)
    {
        return;
    }

    g_ckpt_target = ckptGoHere;

    var L_GeneratingInstall_Text = "새 설치 ID 생성 중...";
    var L_RetrievingCountry_Text = "설치 ID 검색 중...";
    var L_ValidatingConn_Text    = "정품 인증 확인 중...";


    if (ckptGoHere==CKPT_REGDIAL)
    {
        ShowIFrame('False', L_CheckConnectivity_Text);
        Span_WPA_MainTitle.innerText = L_BlankTitle_Text;
    }
    else  if (ckptGoHere==CKPT_ACTIVSVC)
    {
        if (g_ActivSvc_Reload)
        {
            if (g_Load_InstallID)
                ShowIFrame('False', L_GeneratingInstall_Text);
            else
                ShowIFrame('False', L_RetrievingCountry_Text);

            Span_WPA_MainTitle.innerText = L_BlankTitle_Text;
        }
        else
        {
            g_ActivSvc_Reload = true;
        }
    }
    else if (ckptGoHere==CKPT_ACT_MSG)
    {
        if (g_AfterConnectionDone)
        {
            g_AfterConnectionDone = false;
            ShowIFrame('False', L_ValidatingConn_Text);
            Span_WPA_MainTitle.innerText = L_BlankTitle_Text;
        }
        else
            ShowIFrame('False');
    }
    else
    {
        ShowIFrame('False');
    }

    window.setTimeout("ShowGoNavigate();",500);
}

function ExitWPA()
{
    window.external.Finish();
}







function DisableAllButtons()
{
    g.document.body.style.cursor="wait";
    try
    {
        g.btnNext.className="buttons-disabled";
        g.btnNext.disabled=true;
    }
    catch(e) {}
    try
    {
        g.btnBack.className="buttons-disabled";
        g.btnBack.disabled=true;
    }
    catch(e) {}
    try
    {
        g.btnSkip.className="buttons-disabled";
        g.btnSkip.disabled=true;
    }
    catch(e) {}
    try
    {
        g.btnProdkey.className="buttons-disabled";
        g.btnProdkey.disabled=true;
    }
    catch(e) {}
    try
    {
        g.btnQuit.className="buttons-disabled";
        g.btnQuit.disabled=true;
    }
    catch(e) {}
    try
    {
        g.btnTelephone.className="buttons-disabled";
        g.btnTelephone.disabled=true;
    }
    catch(e) {}

}

function GoQuit()
{
    trace("GoQuit: CurrentCKPT = " + g_CurrentCKPT);

    
    
    DisableAllButtons();
    window.external.Finish();
}

function GoNext()
{
    trace("GoNext: CurrentCKPT = " + g_CurrentCKPT);
    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    DisableAllButtons();

    switch (g_CurrentCKPT)
    {
        case CKPT_ACTIV:
            if (g.rb_act_1.checked)
            {
                g_ActivationRadioSticky = 1;
                g_DoActivation = true;

                if (CheckForAnyConnection())
                {
                    GoNavigate(CKPT_REGISTER1);
                }
                else
                {
                    g_PostToMS = false;
                    GoNavigate(CKPT_ACTIVERR);
                }
            }
            else if (g.rb_act_2.checked)
            {
                g_ActivationRadioSticky = 2;
                g_DoActivation = false;
                g_CameFromFirstPage = true;
                GoNavigate(CKPT_ACTIVSVC);
            }
            else
            {
                g_ActivationRadioSticky = 3;
                g_DoActivation = false;
                ShowIFrame('False');
                window.setTimeout("ExitWPA();",1000);
            }
            break;

        case CKPT_REGISTER1:
            if (g.rb_reg_1.checked)
            {
                g_Reg1RadioSticky = 1;
                g_PostToMS = true;
                GoNavigate(CKPT_REGISTER3);
            }
            else
            {
                g_Reg1RadioSticky = 2;
                g_PostToMS = false;
                GoNavigate(CKPT_REGDIAL);
            }
            break;

        case CKPT_ACTIVERR:
            GoNavigate(CKPT_ACTIVSVC);
            break;
        case CKPT_ACTIVSVC:
            GoNavigate(CKPT_DONE);
            break;
        case CKPT_REGISTER3:
            if(VerifyReg3Fields())
            {
                Reg3SaveSettings();
                GoNavigate(CKPT_REGDIAL);
            }
            break;
        case CKPT_ACTCONN:
            if (g.rb_conn_lan.checked)
            {
                g_ActConnRadioSticky = 1;
                GoNavigate(CKPT_ACTLAN);
            }
            else
            {
                g_ActConnRadioSticky = 2;
                PushCKPT(CKPT_REGDIAL);
                Navigate(URLFromCKPT(CKPT_REGDIAL));
            }
            break;
        case CKPT_ACTLAN:

            ProxySettingsObj.UseAuto = g.cb_auto_detect.checked;
            ProxySettingsObj.UseProxy = g.cb_use_proxy.checked;
            ProxySettingsObj.Server = g.txt_proxy_url.value;
            ProxySettingsObj.Port = g.txt_proxy_port.value;

            window.external.set_ProxySettings(
                ProxySettingsObj.UseAuto,
                ProxySettingsObj.UseScript,
                ProxySettingsObj.ScriptUrl,
                ProxySettingsObj.UseProxy,
                ProxySettingsObj.Server + ((ProxySettingsObj.Port == "") ? "" : (":" + ProxySettingsObj.Port))
                );

            ActLan();
            break;
        case CKPT_REGDIAL:
            GoNavigate(CKPT_DONE);
            break;
        case CKPT_ACT_MSG:
            if ( g_ActivationStatus != ERR_ACT_SUCCESS )
            {
                GoNavigate(CKPT_ACTIVSVC);
                break;
            }
            
        case CKPT_DONE:
            window.external.Finish();
            break;

        default:
            
            break;
    }
}



function GoOffline()
{
    GoNext();
}



function SetLastButtonText()
{
    if (g.btnNext != null)
        g_LastButtonText = g.btnNextText;
    else if (g.btnBack != null)
        g_LastButtonText = g.btnBackText;
    else if (g.btnRestore != null)
        g_LastButtonText = g.btnRestoreText;
    else if (g.btnCancel != null)
        g_LastButtonText = g.btnCancelText;
}








function InitFrameRef()
{

    g_LastButtonText = null;
    g_FirstFocusElement = null;
    g_LastKeyDown = null;

    g = document.frames("msoobeMain");
    g.document.body.style.backgroundColor = "transparent";

    try
    {
        g.document.body.onkeydown = OnKeyDown;
        SetLastButtonText();
    }
    catch(e){}
}

function HideButtons(buttons)
{
    if (null != g.btnBack && (buttons & HIDE_BACK))
    {
        g.btnBack.Hide = true;
    }

    if (null != g.btnNext && (buttons & HIDE_NEXT))
    {
        g.btnNext.Hide = true;
    }


    if (null != g.spanCancel && (buttons & HIDE_CANCEL))
    {
        g.btnSkip.Hide = true;
    }

    if (null != g.spanRestore && (buttons & HIDE_RESTORE))
    {
        g.btnRestore.Hide = true;
    }

}

function HandleButtonMouseOver()
{


}

function HandleButtonMouseOut()
{


}

function InitButtons(SimpleBack, SimpleNext)
{
    if(g.btnSkip!=null) {
      g.btnSkip.onmouseover = HandleButtonMouseOver;
      g.btnSkip.onmouseout  = HandleButtonMouseOut;

      if(!g.btnSkip.disabled) {
          g.btnSkip.onclick = GoCancel;





          g.btnSkip.className="buttons";
      } else {
        g.btnSkip.className="buttons-disabled";
      }
    }

    if (g.btnNext != null)
    {
        g.btnNext.onmouseover = HandleButtonMouseOver;
        g.btnNext.onmouseout  = HandleButtonMouseOut;

        if (!g.btnNext.disabled)
        {
            if (SimpleNext == null)
            {
                g.btnNext.onclick = GoNext;
            }
            else
            {
                g.btnNext.onclick = SimpleNavNext;
            }
            g.btnNext.className="buttons";
        }
        else
        {
            g.btnNext.className="buttons-disabled";
        }
    }

    if (g.btnBack != null)
    {
        g.btnBack.onmouseover = HandleButtonMouseOver;
        g.btnBack.onmouseout  = HandleButtonMouseOut;

        if (!g.btnBack.disabled)
        {
            if (SimpleBack == null)
            {
                g.btnBack.onclick = GoBack;
            }
            else
            {
                g.btnBack.onclick = SimpleNavBack;
            }
            g.btnBack.className="buttons";
        }
        else
        {
            g.btnBack.className="buttons-disabled";
        }
    }

    try
    {
        if(g.btnQuit != null) {
          g.btnQuit.onmouseover = HandleButtonMouseOver;
          g.btnQuit.onmouseout  = HandleButtonMouseOut;


          if(g.btnQuit.disabled == false) {
              g.btnQuit.onclick = GoQuit;
              g.btnQuit.className="buttons";
          } else {
            g.btnQuit.className="buttons-disabled";
          }
        }
    } catch(e) {}

    window.setTimeout("EnableDefaultCursor();",500);
}

function EnableDefaultCursor()
{
    g.document.body.style.cursor="default";
}

var g_LastKeyDown = null;
function OnKeyDown()
{
    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    if (g.event.altKey)
    {
        g_LastKeyDown = String.fromCharCode(g.event.keyCode);
        if (g_LastKeyDown != null)
            g_LastKeyDown = g_LastKeyDown.toUpperCase();
    }
    else
        g_LastKeyDown = null;
}


function KeyPressIsNumeric()
{
    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    if (!IsNumeric(g.event.keyCode))
    {
        g.event.keyCode = 0;
        g.event.returnValue = false;
    }
}

function IsNumeric(keyCode)
{
    if ((keyCode >= 48)  && (keyCode <= 57))
        return true;
    else
        return false;
}

function IsSpecial(keyCode)
{














return false;
}

function KeyPressIsValid()
{
    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    if (!IsAlpha(g.event.keyCode) &&
        !IsSpecial(g.event.keyCode) &&
        !IsNumeric(g.event.keyCode))
    {
        g.event.keyCode = 0;
        g.event.returnValue = false;
    }
}

function KeyPressIsAlpha()
{
    try
    {
        if (IsLocalFile() && g.event == null)
            return;
    }
    catch(e)
    {
        return;
    }

    if (!IsAlpha(g.event.keyCode))
    {
        g.event.keyCode = 0;
        g.event.returnValue = false;
    }
}

function IsAlpha(keyCode)
{












        return true;


}

function NumberOfSpaces(strValue)
{





    var iSpaceCount = 0;
    for (iPosition = 0; iPosition < strValue.length; iPosition ++)
    {
        if (strValue.charAt(iPosition) == ' ')
        {
            iSpaceCount++;
        }
    }
    return iSpaceCount;
}
function KeyCodeToUpper()
{
    var strKeyCode = String.fromCharCode(g.event.keyCode);
    strKeyCode = strKeyCode.toUpperCase();
    g.event.keyCode = strKeyCode.charCodeAt(0);
}



var vCurItem = 0;

function SetupPageLayout()
{
    var WPAWindowHeight = document.body.clientHeight;
    var WPAWindowWidth  = document.body.clientWidth;

    if(0 != window.external.Directions.get_AppMode())
    {
        document.all.ifrmMainFrame.style.height = WPAWindowHeight - 93;
        document.all.ifrmMainFrame.style.width  = WPAWindowWidth;
    }

    WPABackground.src = 'images/wpaback.jpg';
    WPAKey.src        = 'images/wpakey.jpg';
    WPATop.src        = 'images/wpatop.jpg';
    WPABottom.src     = 'images/wpabtm.jpg';
    WPAFlag.src       = 'images/wpaflag.jpg';

    WPABottom.style.top = WPAWindowHeight - 45;
    WPAKey.style.left   = WPAWindowWidth - 237;
    WPAKey.style.top    = WPAWindowHeight - 315;

}

function CheckForAnyConnection()
{
    var Capabilities = GetConnectionCapabilities();

    return (Capabilities != CONNECTIONTYPE_INVALID &&
            Capabilities != CONNECTIONTYPE_NONE);
}


var g_fSIFTimer = false;
var g_iSIFTimerID;
function SetTimerShowIFrame(iMilliSeconds)
{
    
    
    if (g_fSIFTimer)
    {
        try
        {
            window.clearTimeout(g_iSIFTimerID);
        }
        catch(e) {}
        g_fSIFTimer = false;
    }

    g_iSIFTimerID = window.setTimeout("ShowIFrame();", iMilliSeconds);
    g_fSIFTimer = true;
}

var g_ShowTransition = false;
function ShowIFrame(ShowIt, loadingstatus)
{
    
    if (g_fSIFTimer)
    {
        try
        {
            window.clearTimeout(g_iSIFTimerID);
        }
        catch(e) {}
        g_fSIFTimer = false;
    }

    if (g_ShowTransition)
    {
        WPATransContainer.filters[0].Apply();
    }

    if (ShowIt == null)
    {
        
        WPA_DIV2.style.visibility="visible";
        WPA_DIV1.style.visibility="hidden";
        PageStatus.style.visibility="hidden";
        WPAProgressbar.style.visibility = "hidden";

        if (g_ShowTransition)
        {
            WPATransContainer.filters[0].Play();
        }
    }
    else
    {
        
        WPA_DIV2.style.visibility="hidden";
        WPA_DIV1.style.visibility="visible";

        if (g_ShowTransition)
        {
            WPATransContainer.filters[0].Play();
        }

        
        if (loadingstatus!=null)
        {
            PageStatus.style.visibility="visible";
            PageStatus.innerHTML=loadingstatus;
            WPAProgressbar.style.visibility = "hidden";  
        }
        else
        {
            PageStatus.style.visibility="hidden";
            WPAProgressbar.style.visibility = "hidden";
        }
    }
}

window.onresize = SetupPageLayout;
var g_Already_Activated;
function InitApplication()
{

    
    window.external.ComputerNameChangeComplete(false);
    WPATransContainer.style.display="inline";

    try
    {
        g_Already_Activated = window.external.NeedActivation();
    }
    catch(e)
    {
        g_Already_Activated = 999;
    }

    


    if (g_Already_Activated == 0)
    {
        
        SetupPageLayout();
        InitFrameRef();
        g_status = STATUS_OFF;
        g_DoActivation = false;
        InitCKPT();
        if (0 != DirObj.get_AppMode)
        {
            do
            {
                PopCKPT();
            }
            while (null != g_CurrentCKPT);
        }
        GoNavigate(CKPT_ACTDONE);
        SetTimerShowIFrame(900);
    }
    else if (g_Already_Activated == 999)
    {
        window.external.Finish();
    }
    else
    {
        SetupPageLayout();
        g_bStartup = true;
        InitFrameRef();
        GetConnectionCapabilities();
        g_status = STATUS_OFF;
        g_DoActivation = true;
        CheckForAnyConnection();
        InitCKPT();
        
        if (0 != DirObj.get_AppMode)
        {
            do
            {
                PopCKPT();
            }
            while (null != g_CurrentCKPT);
        }
        GoNavigate(CKPT_ACTIV);
        SetTimerShowIFrame(900);
    }
}

function loadTransitionFilter()
{
    document.all.WPATransContainer.style.display = "none";
    document.all.WPATransContainer.style.position = "absolute";
    document.all.WPATransContainer.style.top = 0;
    document.all.WPATransContainer.style.left = 0;
    document.all.WPATransContainer.style.width = "100%";
    document.all.WPATransContainer.style.height = "100%";

    if ((window.screen.colordepth >= 16) && window.external.UseFadeEffect())
    {
        document.all.WPATransContainer.style.filter = "progid:DXImageTransform.Microsoft.Fade(duration=0.2,overlap=0.8)";

        try
        {
            if (WPATransContainer.filters[0])
            {
                g_ShowTransition = true;
            }
        }
        catch(e)
        {
        }
    }
}

</script>

</HEAD>

<BODY topMargin=0 bgcolor="#4E6FD6" leftMargin=0 onload="loadTransitionFilter();InitApplication();" scroll=no tabIndex=-1 rightMargin=0>
    <!-- WPA images, dynamic layout positioning will be done in SetupPageLayout() function  -->
    <IMG ID=WPABackground style="LEFT: 0px; TOP: 0px; POSITION: absolute; z-index:-99;" alt="">
    <IMG ID=WPAKey        style="LEFT: 0px; TOP: 0px; POSITION: absolute; z-index:-98;" alt="">
    <IMG ID=WPATop        style="LEFT: 0px; TOP: 0px; POSITION: absolute; z-index:-97;" alt="">
    <IMG ID=WPABottom     style="LEFT: 0px; TOP: 0px; POSITION: absolute; z-index:-96;" alt="">

    <!-- Don't alter this table structure. It's designed to support BiDi and Non-BiDi. -->
    <TABLE WIDTH="95%" BORDER=0 style="POSITION: absolute; LEFT: 20px; TOP: 0px;" CELLPADDING=0 CELLSPACING=0>
    <TR>
        <TD nowrap VALIGN=MIDDLE>
        <SPAN id=Span_WPA_MainTitle class="title" style="height: 28px;" tabIndex=-1>
        </SPAN>
        </TD>

        <TD WIDTH="99%">&nbsp;
        </TD>

        <TD VALIGN=TOP>
        <IMG ID=WPAFlag alt="">
        </TD>
    </TR>
    </TABLE>

    <span ID="WPATransContainer">

          <!-- First Content (by design, don't remove) -->
          <span ID="WPA_DIV1" STYLE="POSITION: absolute; left:0; top:0; width=100%; height=100%; background-Color: transparent;">
          <table border=0 width="100%" height="100%" class="text-primary">
          <tr>
              <td valign=middle align=center>
                  <span id=PageStatus></span>
                  <br>
                  <span id=WPAProgressbar style="visibility:hidden;"><img src="images/progress.gif"></span>
              </td>
          </tr>
          </table>
          </span>

          <!-- Actual Content -->
          <span id="WPA_DIV2" style="visibility: hidden; POSITION: absolute; LEFT: 0px; TOP: 48px; width=100%; height=100%;" tabIndex=-1>
          <IFRAME ALLOWTRANSPARENCY="true" frameBorder=no width="100%" height="100%" id=ifrmMainFrame name=msoobeMain src="about:blank" tabIndex=0></IFRAME>
          </span>
    </span>
</BODY>
</HTML>

